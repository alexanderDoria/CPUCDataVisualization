sum(table)
barplot(table, beside = TRUE, col = c("green", "red"), legend = TRUE,
names.arg = c("full", "not full"), main="attendance (full or not full) vs strength")
strong = c(sum(opp_bin_str == TRUE & data$result == "W"),
sum(opp_bin_str == TRUE & data$result == "L"))
weak = c(sum(opp_bin_str == FALSE & data$full == "W"),
sum(opp_bin_str == FALSE & data$full == "L"))
table = rbind(strong, weak)
table = rbind(strong, weak)
barplot(table, beside = TRUE, col = c("green", "red"), legend = TRUE,
names.arg = c("full", "not full"), main="outcome vs binary strength")
weak = c(sum(opp_bin_str == FALSE & data$result == "W"),
sum(opp_bin_str == FALSE & data$result == "L"))
table = rbind(strong, weak)
barplot(table, beside = TRUE, col = c("green", "red"), legend = TRUE,
names.arg = c("full", "not full"), main="outcome vs binary strength")
barplot(table, beside = TRUE, col = c("green", "red"), legend = TRUE,
names.arg = c("win", "lose"), main="outcome vs binary strength")
#attendance vs strength of opponent
strong = c(sum(opp_bin_str == TRUE & data$full == TRUE),
sum(opp_bin_str == TRUE & data$full == FALSE))
weak = c(sum(opp_bin_str == FALSE & data$full == TRUE),
sum(opp_bin_str == FALSE & data$full == FALSE))
table = rbind(strong, weak)
chisq.test(table, correct = FALSE)
barplot(table, beside = TRUE, col = c("green", "red"), legend = TRUE,
names.arg = c("full", "not full"), main="attendance (full or not full) vs binary strength")
#outcome vs strength of opponent
strong = c(sum(opp_bin_str == TRUE & data$result == "W"),
sum(opp_bin_str == TRUE & data$result == "L"))
weak = c(sum(opp_bin_str == FALSE & data$result == "W"),
sum(opp_bin_str == FALSE & data$result == "L"))
table = rbind(strong, weak)
barplot(table, beside = TRUE, col = c("green", "red"), legend = TRUE,
names.arg = c("win", "lose"), main="outcome vs binary strength")
#attendance vs outcome
win = c(17, 10)
lose = c(8, 6)
table = rbind(win, lose)
chisq.test(table, correct = FALSE)
barplot(table, beside = TRUE, col = c("green", "red"), legend = TRUE,
names.arg = c("full", "not full"), main="attendance (full or not full) vs outcome")
chisq.test(table, correct = FALSE)
summary(fit)
fit.adj = lm(y ~ x + z)
summary(fit.adj)$coef
boxplot(y ~ f, horizontal=TRUE, xlab="score diff", main="")
y = data$diff
f = data$full
boxplot(y ~ f, horizontal=TRUE, xlab="score diff", main="")
f = data$full
par(mfrow = c(1, 1))
boxplot(y ~ f, horizontal=TRUE, xlab="score diff", main="")
f = data$full
par(mfrow = c(1, 1))
boxplot(y ~ f, horizontal=TRUE, xlab="score diff", main="")
data = data[1:nrow(data) - 1,]
x = data$attendance
y = data$diff
fit = lm(y ~ x)
plot(x, y, main="OKC - point differential vs attendance", xlab="attendance", ylab="point differential")
abline(fit)
summary(fit)
f = data$full
par(mfrow = c(1, 1))
boxplot(y ~ f, horizontal=TRUE, xlab="score diff", main="")
data = read.csv(file.choose())
data = read.csv(file.choose())
data = data[1:nrow(data) - 1,]
x = data$attendance
y = data$diff
fit = lm(y ~ x)
plot(x, y, main="OKC - point differential vs attendance", xlab="attendance", ylab="point differential")
abline(fit)
summary(fit)
f = data$full
par(mfrow = c(1, 1))
boxplot(y ~ f, horizontal=TRUE, xlab="score diff", main="")
plot(y, f)
boxplot(y ~ f, horizontal=TRUE, xlab="score diff", main="")
data = read.csv(file.choose())
data = data[1:nrow(data) - 1,]
x = data$attendance
y = data$diff
fit = lm(y ~ x)
plot(x, y, main="OKC - point differential vs attendance", xlab="attendance", ylab="point differential")
abline(fit)
summary(fit)
f = data$full
boxplot(y ~ f, horizontal=TRUE, xlab="score diff", main="")
boxplot(y ~ f, horizontal=TRUE, main="")
View(data)
nrow(data)
f
data = read.csv(file.choose())
data = data[1:nrow(data) - 1,]
x = data$attendance
y = data$diff
f = data$full
boxplot(y ~ f, horizontal=TRUE, xlab="score diff", main="")
f
f = as.character(f)
f
boxplot(y ~ f, horizontal=TRUE, xlab="score diff", main="")
?boxplot
")
boxplot(y ~ f, horizontal=TRUE, xlab="score diff", main="", col="red ")
boxplot(y ~ f, horizontal=TRUE, xlab="score diff", main="", col=c("red", "blue"))
boxplot(y ~ f, horizontal=TRUE, xlab="score diff", main="", col=c("#4286f4", "blue"))
boxplot(y ~ f, horizontal=TRUE, xlab="score diff", main="", col=c("#4286f4", "#f4a442"))
main="attendance vs score differential", ylab="attendance (binary)")
boxplot(y ~ f, horizontal=TRUE, xlab="score differential", main="", col=c("#4286f4", "#f4a442"),
main="attendance vs score differential", ylab="attendance (binary)")
boxplot(y ~ f, horizontal=TRUE, xlab="score differential", main="", col=c("#4286f4", "#f4a442"),
main="attendance vs score differential", ylab="attendance (full or not)")
boxplot(y ~ f, horizontal=TRUE, xlab="score differential", main="", col=c("#4286f4", "#f4a442"),
main="attendance vs score differential", ylab="attendance (full or not)")
boxplot(y ~ f, horizontal=TRUE, xlab="score differential", main="", col=c("#4286f4", "#f4a442"),
main="attendance vs score differential", ylab="attendance (full or not)")
plot(x, y, main="OKC - point differential vs attendance", xlab="attendance", ylab="point differential")
abline(fit)
plot(x, y, col="$4286f4" main="OKC - point differential vs attendance", xlab="attendance", ylab="point differential")
plot(x, y, col="#4286f4" main="OKC - point differential vs attendance", xlab="attendance", ylab="point differential")
plot(x, y, col="#4286f4", main="OKC - point differential vs attendance", xlab="attendance", ylab="point differential")
abline(fit)
abline(fit, col="#4286f4")
abline(fit, col="#f4a442")
plot(x, y, col="#0561b2", main="OKC - point differential vs attendance", xlab="attendance", ylab="point differential")
abline(fit, col="#f49622")
plot(x, y, col="#0561b2 pch="20", main="OKC - point differential vs attendance", xlab="attendance", ylab="point differential")
plot(x, y, col="#0561b2 pch=20, main="OKC - point differential vs attendance", xlab="attendance", ylab="point differential")
plot(x, y, col="#0561b2, pch="20", main="OKC - point differential vs attendance", xlab="attendance", ylab="point differential")
plot(x, y, col="#0561b2", pch="20", main="OKC - point differential vs attendance", xlab="attendance", ylab="point differential")
plot(x, y, col="#0561b2", pch=20, main="OKC - point differential vs attendance", xlab="attendance", ylab="point differential")
abline(fit, col="#f49622")
table = rbind(strong, weak)
z = data$opp_str
fit.adj = lm(y ~ x + z)
summary(fit.adj)$coef
plot(x, y)
#attendance vs outcome
win = c(17, 10)
lose = c(8, 6)
table = rbind(win, lose)
table
chisq.test(table, correct = FALSE)
y = log(data$diff)
data = read.csv(file.choose())
data = read.csv(file.choose())
data = data[1:nrow(data) - 1,]
x = data$attendance
y = data$diff
y = log(data$diff)
y = sqrt(data$diff)
z = data$opp_str
fit.adj = lm(y ~ x + z)
summary(fit.adj)$coef
plot(x, y)
#attendance vs outcome
win = c(17, 10)
lose = c(8, 6)
table = rbind(win, lose)
chisq.test(table, correct = FALSE)
strong = c(sum(opp_bin_str == TRUE & data$result == "W"),
sum(opp_bin_str == TRUE & data$result == "L"))
weak = c(sum(opp_bin_str == FALSE & data$result == "W"),
sum(opp_bin_str == FALSE & data$result == "L"))
win = c(17, 10)
lose = c(8, 6)
table = rbind(win, lose)
chisq.test(table, correct = FALSE)
barplot(table, beside = TRUE, col = c("green", "red"), legend = TRUE,
names.arg = c("full", "not full"), main="attendance (full or not full) vs outcome")
opp_bin_str = data$opp_str >= .5
#added another column
data = data.frame(data, opp_bin_str)
#attendance vs strength of opponent
strong = c(sum(opp_bin_str == TRUE & data$full == TRUE),
sum(opp_bin_str == TRUE & data$full == FALSE))
weak = c(sum(opp_bin_str == FALSE & data$full == TRUE),
sum(opp_bin_str == FALSE & data$full == FALSE))
table = rbind(strong, weak)
chisq.test(table, correct = FALSE)
barplot(table, beside = TRUE, col = c("green", "red"), legend = TRUE,
names.arg = c("full", "not full"), main="attendance (full or not full) vs binary strength")
strong = c(sum(opp_bin_str == TRUE & data$result == "W"),
sum(opp_bin_str == TRUE & data$result == "L"))
weak = c(sum(opp_bin_str == FALSE & data$result == "W"),
sum(opp_bin_str == FALSE & data$result == "L"))
table = rbind(strong, weak)
strong = c(sum(opp_bin_str == TRUE & data$result == "W"),
sum(opp_bin_str == TRUE & data$result == "L"))
weak = c(sum(opp_bin_str == FALSE & data$result == "W"),
sum(opp_bin_str == FALSE & data$result == "L"))
table = rbind(strong, weak)
chisq.test(table, correct = FALSE)
strong = c(sum(opp_bin_str == TRUE & data$result == "W"),
sum(opp_bin_str == TRUE & data$result == "L"))
weak = c(sum(opp_bin_str == FALSE & data$result == "W"),
sum(opp_bin_str == FALSE & data$result == "L"))
table = rbind(strong, weak)
chisq.test(table, correct = FALSE)
table = rbind(strong, weak)
table
chisq.test(table, correct = FALSE)
spy = read.csv( file.choose() )
View(spy)
plot(spy$RSI, spy$Change)
spy$Change[1]
spy$Change[2]
spy$Change[2:3]
plot(spy$RSI, spy$Change[2:length(spy$Change)])
plot(spy$RSI[1:length(spy$RSI) - 1], spy$Change[2:length(spy$Change)])
spy = read.csv( file.choose() )
above200MA = spy$X200.MA < spy$Close
mean(above200MA)
above200MA
2 != 3
is.nan(above200MA)
is.na(above200MA)
clear
c
!is.na(above200MA)
above200MA[!is.null(above200MA)]
!is.null(above200MA)
is.null(above200MA)
is.na(above200MA)
above200MA[!is.na(above200MA)]
head(above200MA[!is.na(above200MA)])
mean(above200MA[!is.na(above200MA)])
plot(spy$RSI, spy$Change)
spy[,spy$Change]
spy[,Change]
spy[,"Change"]
spy[,RSI < 60]
spy[,"RSI" < 60]
spy$RSI < 60
spy[,"Change"]
spy[,"Change"][1]
spy[,"Change"][spy$RSI < 60]
spy$Change[spy$RSI < 60 && ]
spy$Change[spy$RSI < 60]
spy$Change[spy$RSI < 60 && spy$RSI > 50]
spy$Change[spy$RSI < 60 & spy$RSI > 50]
#preformance at different RSI levels
preformanceByRSIRange = function (r1, r2){
if (r1 > r2){
spy$Change[spy$RSI < r1 & spy$RSI > r2]
} else if (r2 > r1){
spy$Change[spy$RSI < r2 & spy$RSI > r1]
}
}
preformanceByRSIRange(60, 70)
mean(preformanceByRSIRange(60, 70))
#preformance at different RSI levels
preformanceByRSIRange = function (r1, r2){
if (r1 > r2){
!is.na(spy$Change[spy$RSI < r1 & spy$RSI > r2])
} else if (r2 > r1){
!is.na(spy$Change[spy$RSI < r2 & spy$RSI > r1])
}
}
preformanceByRSIRange(60, 70)
stock = "SPY"
URL = paste0("http://ichart.finance.yahoo.com/table.csv?s=", stock)
spy = read.csv(URL)
plot(spy$RSI, spy$Change)
stock = "SPY"
URL = paste0("http://ichart.finance.yahoo.com/table.csv?s=", stock)
spy = read.csv(URL)
spy = read.csv(file.choose())
plot(spy$RSI, spy$Change)
plot(spy$RSI[1:length(spy$RSI) - 1], spy$Change[2:length(spy$Change)])
above200MA = spy$X200.MA < spy$Close
mean(above200MA[!is.na(above200MA)])
preformanceByRSIRange = function (r1, r2){
if (r1 > r2){
spy$Change[spy$RSI < r1 & spy$RSI > r2]
} else if (r2 > r1){
spy$Change[spy$RSI < r2 & spy$RSI > r1]
}
}
preformanceByRSIRange(60, 70)
preformanceByRSIRange = function (r1, r2){
if (r1 > r2){
!is.na(spy$Change[spy$RSI < r1 & spy$RSI > r2])
} else if (r2 > r1){
!is.na(spy$Change[spy$RSI < r2 & spy$RSI > r1])
}
}
preformanceByRSIRange(60, 70)
vec <- 1:1000
vec
vec[runif(200, 1, 1000)] <- NA
vec
max(vec)
max( na.omit(vec) )
vec
na.omit(vec)
preformanceByRSIRange = function (r1, r2){
if (r1 > r2){
na.omit(spy$Change[spy$RSI < r1 & spy$RSI > r2])
} else if (r2 > r1){
na.omit(spy$Change[spy$RSI < r2 & spy$RSI > r1])
}
}
preformanceByRSIRange(60, 70)
hist(preformanceByRSIRange(60, 70))
hist(preformanceByRSIRange(20, 30))
hist(preformanceByRSIRange(10, 30))
hist(preformanceByRSIRange(70, 80))
hist(preformanceByRSIRange(70, 90))
seq(5, 10, by="2")
seq(5, 10, by=2)
RSIlower = seq(10, 80, by=20)
RSIupper = seq(20, 90, by=20)
hist(preformanceByRSIRange(RSIlower, RSIupper))
hist(preformanceByRSIRange(RSIlower, RSIupper), main=RSIupper + " - " + RSIlower)
hist(preformanceByRSIRange(30, 20))
callSync
do.call(20, "input") %>%
strsplit(NULL) %>%
sapply(sample) %>%
apply(2, paste, collapse = "")
data = read.csv(file.choose())
install.packages("igraph")
install.packages("network")
install.packages("sna")
install.packages("visNetwork")
install.packages("ndtv", dependencies=T)
plot(x=1:10, y=rep(5,10), pch=19, cex=5, col="dark red")
points(x=1:10, y=rep(6, 10), pch=19, cex=5, col="#557799")
points(x=1:10, y=rep(4, 10), pch=19, cex=5, col=rgb(.25, .5, .3))
rm(list = ls())
nodes <- read.csv("./Data files/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
pwd
pwd()
setwd("C:/Users/Red-8/Desktop/polnet2016")
# If you don't know the path to the folder and you're in RStudio, go to the
# "Session" menu -> "Set Working Directory" -> "To Source File Location"
# --DATASET 1: edgelist--
nodes <- read.csv("./Data files/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("./Data files/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
rm(list = ls())
setwd("C:/Users/Red-8/Downloads/polnet2016")
nodes <- read.csv("./Data files/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("./Data files/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
head(nodes)
head(links)
nrow(nodes); length(unique(nodes$id))
links <- aggregate(links[,3], links[,-3], sum)
links <- links[order(links$from, links$to),]
colnames(links)[4] <- "weight"
rownames(links) <- NULL
nrow(links); nrow(unique(links[,c("from", "to")]))
View(links)
View(nodes)
nodes2 <- read.csv("./Data files/Dataset2-Media-User-Example-NODES.csv", header=T, as.is=T)
links2 <- read.csv("./Data files/Dataset2-Media-User-Example-EDGES.csv", header=T, row.names=1)
# Examine the data:
head(nodes2)
head(links2)
links2 <- as.matrix(links2)
dim(links2)
dim(nodes2)
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
class(net)
library("igraph")
library("igraph")
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
class(net)
net
E(net)
V(net)
E(net)$type
E(net)$weight
V(net)[media=="BBC"]
E(net)[type=="mention"]
as_edgelist(net, names=T)
E(net)
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="weight")
as_data_frame(net, what="edges")
as_data_frame(net, what="vertices")
as_data_frame(net, what="edges")
net[1,]
net[5,7]
head(nodes2)
head(links2)
links2 <- as.matrix(links2)
dim(links2)
dim(nodes2)
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
class(net)
net
net[1,]
net[5,7]
plot(net) # not pretty!
net
net <- simplify(net, remove.multiple = F, remove.loops = T)
plot(net, edge.arrow.size=.4,vertex.label=NA)
plot(net) # not pretty!
plot(net, edge.arrow.size=.4,vertex.label=NA)
net <- simplify(net, remove.multiple = F, remove.loops = T)
plot(net, edge.arrow.size=.4,vertex.label=NA)
head(nodes2)
head(links2)
net2 <- graph_from_incidence_matrix(links2)
table(V(net2)$type)
plot(net2,vertex.label=NA)
class(net2)
net2
?igraph.plotting
plot(net, edge.arrow.size=.4, edge.curved=.1)
plot(net, edge.arrow.size=.4, edge.curved=0,
vertex.color="orange", vertex.frame.color="#555555",
vertex.label=V(net)$media, vertex.label.color="black",
vertex.label.cex=.7)
colrs <- c("gray50", "tomato", "gold")
V(net)$color <- colrs[V(net)$media.type]
deg <- degree(net, mode="all")
V(net)$size <- deg*3
V(net)$size <- V(net)$audience.size*0.6
V(net)$label.color <- "black"
V(net)$label <- NA
E(net)$width <- E(net)$weight/6
E(net)$arrow.size <- .2
E(net)$edge.color <- "gray80"
plot(net)
plot(net, edge.color="orange", vertex.color="gray50")
plot(net)
legend(x=-1.1, y=-1.1, c("Newspaper","Television", "Online News"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2.5, bty="n", ncol=1)
plot(net, vertex.shape="none", vertex.label=V(net)$media,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=1.2, edge.color="gray90")
edge.start <- ends(net, es=E(net), names=F)[,1] # get the "from" node
edge.col <- V(net)$color[edge.start]
plot(net, edge.color=edge.col, edge.curved=.1)
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="weight")
as_data_frame(net, what="edges")
as_data_frame(net, what="vertices")
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
E(net)
V(net)
E(net)$type
V(net)$media
# If you need them, you can extract an edge list
# or a matrix back from the igraph networks.
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="weight")
as_data_frame(net, what="edges")
as_data_frame(net, what="vertices")
plot(net) # not pretty!
rm(list = ls())
setwd("C:/Users/Red-8/Downloads/polnet2016")
nodes <- read.csv("./Data files/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("./Data files/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
E(net)
V(net)
E(net)$type
V(net)$media
E(net)$media
E(net)
E(net)$type
E(net)
edges = E(net)
edges$type
edges$weight
View(links)
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="weight")
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="weight")
as_data_frame(net, what="edges")
as_data_frame(net, what="edges")
as_data_frame(net, what="vertices")
plot(net) # not pretty!
net <- simplify(net, remove.multiple = F, remove.loops = T)
plot(net, edge.arrow.size=.4,vertex.label=NA)
plot(net, edge.arrow.size=.4, edge.curved=.1)
colrs <- c("gray50", "tomato", "gold")
V(net)$color <- colrs[V(net)$media.type]
deg <- degree(net, mode="all")
V(net)$size <- deg*3
V(net)$size <- V(net)$audience.size*0.6
V(net)$label.color <- "black"
V(net)$label <- NA
E(net)$width <- E(net)$weight/6
E(net)$arrow.size <- .2
E(net)$edge.color <- "gray80"
plot(net)
plot(net)
plot(net)
plot(net)
legend(x=-1.1, y=-1.1, c("Newspaper","Television", "Online News"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2.5, bty="n", ncol=1)
plot(net, vertex.shape="none", vertex.label=V(net)$media,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=1.2, edge.color="gray90")
edge.start <- ends(net, es=E(net), names=F)[,1] # get the "from" node
edge.col <- V(net)$color[edge.start]
plot(net, edge.color=edge.col, edge.curved=.1)
net.bg <- sample_pa(80, 1.2)
V(net.bg)$size <- 8
V(net.bg)$frame.color <- "white"
V(net.bg)$color <- "orange"
V(net.bg)$label <- ""
E(net.bg)$arrow.mode <- 0
plot(net.bg)
